// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	dto "github.com/yet-another-todo-list-golang/model/dto"
	entity "github.com/yet-another-todo-list-golang/model/entity"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// GetOne provides a mock function with given fields: id
func (_m *UserService) GetOne(id string) (error, entity.User) {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	var r1 entity.User
	if rf, ok := ret.Get(1).(func(string) entity.User); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(entity.User)
	}

	return r0, r1
}

// Login provides a mock function with given fields: loginDto
func (_m *UserService) Login(loginDto dto.LoginDto) (error, string, entity.User) {
	ret := _m.Called(loginDto)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.LoginDto) error); ok {
		r0 = rf(loginDto)
	} else {
		r0 = ret.Error(0)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(dto.LoginDto) string); ok {
		r1 = rf(loginDto)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 entity.User
	if rf, ok := ret.Get(2).(func(dto.LoginDto) entity.User); ok {
		r2 = rf(loginDto)
	} else {
		r2 = ret.Get(2).(entity.User)
	}

	return r0, r1, r2
}

// Register provides a mock function with given fields: registerDto
func (_m *UserService) Register(registerDto dto.RegisterUserDto) (error, entity.User) {
	ret := _m.Called(registerDto)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.RegisterUserDto) error); ok {
		r0 = rf(registerDto)
	} else {
		r0 = ret.Error(0)
	}

	var r1 entity.User
	if rf, ok := ret.Get(1).(func(dto.RegisterUserDto) entity.User); ok {
		r1 = rf(registerDto)
	} else {
		r1 = ret.Get(1).(entity.User)
	}

	return r0, r1
}
