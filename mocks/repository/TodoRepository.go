// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entity "github.com/yet-another-todo-list-golang/model/entity"
)

// TodoRepository is an autogenerated mock type for the TodoRepository type
type TodoRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: todo, user
func (_m *TodoRepository) Create(todo entity.Todo, user entity.User) error {
	ret := _m.Called(todo, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Todo, entity.User) error); ok {
		r0 = rf(todo, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *TodoRepository) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *TodoRepository) FindAll() (error, []entity.Todo) {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	var r1 []entity.Todo
	if rf, ok := ret.Get(1).(func() []entity.Todo); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]entity.Todo)
		}
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: id
func (_m *TodoRepository) FindOne(id string) (error, entity.Todo) {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	var r1 entity.Todo
	if rf, ok := ret.Get(1).(func(string) entity.Todo); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(entity.Todo)
	}

	return r0, r1
}

// Update provides a mock function with given fields: todo
func (_m *TodoRepository) Update(todo entity.Todo) error {
	ret := _m.Called(todo)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Todo) error); ok {
		r0 = rf(todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
