// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entity "github.com/yet-another-todo-list-golang/model/entity"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: user
func (_m *UserRepository) Create(user entity.User) (error, entity.User) {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	var r1 entity.User
	if rf, ok := ret.Get(1).(func(entity.User) entity.User); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Get(1).(entity.User)
	}

	return r0, r1
}

// FindByEmail provides a mock function with given fields: email
func (_m *UserRepository) FindByEmail(email string) (error, entity.User) {
	ret := _m.Called(email)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Error(0)
	}

	var r1 entity.User
	if rf, ok := ret.Get(1).(func(string) entity.User); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Get(1).(entity.User)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *UserRepository) FindById(id string) (error, entity.User) {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	var r1 entity.User
	if rf, ok := ret.Get(1).(func(string) entity.User); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(entity.User)
	}

	return r0, r1
}
